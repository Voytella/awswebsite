AWSTemplateFormatVersion: 2010-09-09
Description: Create a Lambda Function from already uploaded code.
Parameters:
  WebsiteBucketName:
    Type: String
    Default: www.autodeploytest.link

Resources:

# AWS Role that will execute the website updating code.
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'LambdaExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'LambdaExecutionPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: 'Allow'
                Action:
                  - 's3:GetObject'
                Resource: !ImportValue WebsiteBucketArn

  # AWS Lambda function that will use the Lambda execution role to execute the
  # website updating code.
  UpdateWebsiteLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'UpdateWebsite'
      Handler: 'lambda_function.lambda_handler'
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: www.autodeploytest.link-lambda
        S3Key: 'updateWebsiteCode.zip'
      Runtime: 'python3.10'
      MemorySize: 128
      Timeout: 3

  # S3 Bucket Configuration
  S3BucketConfiguration:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref WebsiteBucketName
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 's3.GetObject'
            Resource: !Sub 'arn:aws:s3:::${WebsiteBucketName}/*'
          - Effect: 'Allow'
            Principal:
              AWS: !GetAtt LambdaExecutionRole.Arn
            Action: "s3.GetObject"
            Resource: !ImportValue WebsiteBucketArn

  # Add the S3 Event Notification to the Lambda Function
  S3EventTrigger:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt UpdateWebsiteLambda.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 's3.amazonaws.com'
      SourceArn: !ImportValue WebsiteBucketArn

  # Configure the S3 Event
  S3EventConfiguration:
    Type: 'Custom::S3BucketNotification'
    Properties:
      ServiceToken: !GetAtt CustomS3BucketNotificationFunction.Arn
      BucketName: !ImportValue WebsiteBucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt UpdateWebsiteLambda.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: 'prefix'
                    Value: 'data/'

  CustomS3BucketNotificationFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          def handler(event, context):
            s3 = boto3.client('s3')
            bucket_name = event['ResourceProperties']['BucketName']
            notification_configuration = event['ResourceProperties']['NotificationConfiguration'] 
            try:
              if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
                s3.put_bucket_notification_configuration(
                  Bucket=bucket_name,
                  NotificationConfiguration=notification_configuration
                )
              elif event['RequestType'] == 'Delete':
                s3.put_bucket-notification_configuration(
                  Bucket=bucket_name,
                  NotificationConfiguration={}
                )
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
            except Exception as e:
              cfnresponse.send(event, context, cfnresponse.FAILED, {'error': str(e)})
      Runtime: 'python3.8'
      MemorySize: 128
      Timeout: 30

Outputs:
  UpdateWebsiteLambdaArn:
    Value: !GetAtt UpdateWebsiteLambda.Arn
    Description: "ARN of the Lambda Function"
